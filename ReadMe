# Todo App

{add test badges here, all projects you build from here on out will have tests, therefore you should have github workflow badges at the top of your repositories: [Github Workflow Badges](https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge)}

## Demo & Snippets

---

## Requirements / Purpose

- MVP - front-end
- Must be able to add categories
- Must be able to add new tasks tagged with a task category
- Must be able to update tasks automatically by changing the task name and the category / edit button is fine
- Must be able to duplicate tasks
- Must be able to delete tasks (remember this is soft delete, in the backend it will be isArchived)
- You must add your own styling

- MVP - back-end
- Deleting a task should set an isArchived flag in the database instead of deleting the task from the database
- Add a filter to the frontend application that allows you to filter tasks by category
- Categories and Todos should be stored in separate tables

---

## Build Steps

- how to build / run project

```bash
spring.application.name=todo
spring.datasource.url=jdbc:mysql://localhost:3306/todos
spring.datasource.username=root
# spring.datasource.password=MyPass
spring.jpa.properties.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.profiles.active=dev
```

---

## Design Goals / Approach

- I chose to use ModelMapper in this project, mostly from learning perspective. I know that this is a small project to use a full benefit for ModelMapper. Despite it took a more time to set up, I do like using it.
- I chose to use JavaFaker for data seeding
- I am using Abstract class as a BaseEntity class holding ID, createdAt and updatedAt, which is then inherited by the child
- For testing I chose RestAssure for end to end testing and Mockito for unit testing

- I chose to use React-Hook-Form
- I chose to use schema based validation - zod

---

## Features

- What features does the project have?
- CRUD for todo and category

---

## Known issues

---

## Future Goals

- add sorting and filtering

---

## What did you struggle with?

- Displaying correct category in the drop-down when implementing re-using the todoItem form for create and update

---

## Licensing Details

- Public, free
